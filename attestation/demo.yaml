#cloud-config
# Add groups to the system
# The following example adds the ubuntu group with members 'root' and 'sys'
# and the empty group cloud-users.
#groups:
#  - ubuntu: [root,sys]
#  - cloud-users

# Add users to the system. Users are added after groups are added.
# Note: Most of these configuration options will not be honored if the user
#       already exists. Following options are the exceptions and they are
#       applicable on already-existing users:
#       - 'plain_text_passwd', 'hashed_passwd', 'lock_passwd', 'sudo',
#         'ssh_authorized_keys', 'ssh_redirect_user'.
#users:
#  - default
#  - name: foobar
#    gecos: Foo B. Bar
#    primary_group: foobar
#    groups: users
#    selinux_user: staff_u
#    expiredate: '2032-09-01'
#    ssh_import_id: foobar
#    lock_passwd: false
#    passwd: $6$j212wezy$7H/1LT4f9/N3wpgNunhsIqtMj62OKiS3nyNwuizouQc3u7MbYCarYeAHWYPYb2FT.lbioDm2RrkJPb9BZMN1O/
#  - name: barfoo
#    gecos: Bar B. Foo
#    sudo: ALL=(ALL) NOPASSWD:ALL
#    groups: users, admin
#    ssh_import_id: None
#    lock_passwd: true
#    ssh_authorized_keys:
#      - <ssh pub key 1>
#      - <ssh pub key 2>
#  - name: cloudy
#    gecos: Magic Cloud App Daemon User
#    inactive: '5'
#    system: true
#  - name: fizzbuzz
#    sudo: False
#    ssh_authorized_keys:
#      - <ssh pub key 1>
#      - <ssh pub key 2>
#  - snapuser: joe@joeuser.io
#  - name: nosshlogins
#    ssh_redirect_user: true

# Valid Values:
#   name: The user's login name
#   expiredate: Date on which the user's account will be disabled.
#   gecos: The user name's real name, i.e. "Bob B. Smith"
#   homedir: Optional. Set to the local path you want to use. Defaults to
#           /home/<username>
#   primary_group: define the primary group. Defaults to a new group created
#           named after the user.
#   groups:  Optional. Additional groups to add the user to. Defaults to none
#   selinux_user:  Optional. The SELinux user for the user's login, such as
#           "staff_u". When this is omitted the system will select the default
#           SELinux user.
#   lock_passwd: Defaults to true. Lock the password to disable password login
#   inactive: Number of days after password expires until account is disabled
#   passwd: The hash -- not the password itself -- of the password you want
#           to use for this user. You can generate a safe hash via:
#               mkpasswd --method=SHA-512 --rounds=4096
#           (the above command would create from stdin an SHA-512 password hash
#           with 4096 salt rounds)
#
#           Please note: while the use of a hashed password is better than
#               plain text, the use of this feature is not ideal. Also,
#               using a high number of salting rounds will help, but it should
#               not be relied upon.
#
#               To highlight this risk, running John the Ripper against the
#               example hash above, with a readily available wordlist, revealed
#               the true password in 12 seconds on a i7-2620QM.
#
#               In other words, this feature is a potential security risk and is
#               provided for your convenience only. If you do not fully trust the
#               medium over which your cloud-config will be transmitted, then you
#               should use SSH authentication only.
#
#               You have thus been warned.
#   no_create_home: When set to true, do not create home directory.
#   no_user_group: When set to true, do not create a group named after the user.
#   no_log_init: When set to true, do not initialize lastlog and faillog database.
#   ssh_import_id: Optional. Import SSH ids
#   ssh_authorized_keys: Optional. [list] Add keys to user's authorized keys file
#   ssh_redirect_user: Optional. [bool] Set true to block ssh logins for cloud
#       ssh public keys and emit a message redirecting logins to
#       use <default_username> instead. This option only disables cloud
#       provided public-keys. An error will be raised if ssh_authorized_keys
#       or ssh_import_id is provided for the same user.
#   sudo: Defaults to none. Accepts a sudo rule string, a list of sudo rule
#         strings or False to explicitly deny sudo usage. Examples:
#
#         Allow a user unrestricted sudo access.
#             sudo:  ALL=(ALL) NOPASSWD:ALL
#
#         Adding multiple sudo rule strings.
#             sudo:
#               - ALL=(ALL) NOPASSWD:/bin/mysql
#               - ALL=(ALL) ALL
#
#         Prevent sudo access for a user.
#             sudo: False
#
#         Note: Please double check your syntax and make sure it is valid.
#               cloud-init does not parse/check the syntax of the sudo
#               directive.
#   system: Create the user as a system user. This means no home directory.
#   snapuser: Create a Snappy (Ubuntu-Core) user via the snap create-user
#             command available on Ubuntu systems.  If the user has an account
#             on the Ubuntu SSO, specifying the email will allow snap to
#             request a username and any public ssh keys and will import
#             these into the system with username specifed by SSO account.
#             If 'username' is not set in SSO, then username will be the
#             shortname before the email domain.
#
users:
  - default
  - name: jesse
    gecos: Jesse Larrew
    groups: [ users, sudo, adm, cdrom, plugdev, dip ]
    ssh_authorized_keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDL6Ae8zQ6FhU5Y7P4T3Fg7wf2HhTKnkfPQv8yAPe7OvVA3kAzdRaVgEjxsFbJjK6PykKRonhbdSBXhApkC9wzSZ/vDELlwnqEiw1ynuZ3KhOLdZC5Z1bDZnuRkIz52ju5VOxnRqSPqlRnvJgw3cRMcSmrKAQ0If0ET2qJHRa0jEz2jNaIrpuaRWVhtBCsC40ouiBGp/uxrCj9ImgLFVdlXyi4YOBICOKCVBmWjxEdhsAUivoIDhWr91F1P+wHVAO9xoWCjLZzorCBJnlz/3Zu2tBGREi4TAnA+sQObrzVRezryvcyssqdhFMgWDrPWsjqlqz4zW++ivg2wOuZHMKSABOmsUH77964eC+kzhc562U2UL5dxUg4PigCcsnRjkfZlZOu4RbyMrRzai0JV/iz/TqQ25EqXEWSbiPfen0busqmQ+z3/ONNeYYDB38Htng9RLVAQbcn58dX1HJTg2AyAilGEps67RcBcTK864tUUIlfW1aaIHvPkY0gvt10Sy+s= bc@bc1

# Default user creation:
#
# Unless you define users, you will get a 'ubuntu' user on ubuntu systems with the
# legacy permission (no password sudo, locked user, etc). If however, you want
# to have the 'ubuntu' user in addition to other users, you need to instruct
# cloud-init that you also want the default user. To do this use the following
# syntax:
#   users:
#     - default
#     - bob
#     - ....
#  foobar: ...
#
# users[0] (the first user in users) overrides the user directive.
#
# The 'default' user above references the distro's config:
# system_info:
#   default_user:
#     name: Ubuntu
#     plain_text_passwd: 'ubuntu'
#     home: /home/ubuntu
#     shell: /bin/bash
#     lock_passwd: True
#     gecos: Ubuntu
#     groups: [adm, audio, cdrom, dialout, floppy, video, plugdev, dip, netdev]

# apt_pipelining (configure Acquire::http::Pipeline-Depth)
# Default: disables HTTP pipelining. Certain web servers, such
# as S3 do not pipeline properly (LP: #948461).
# Valid options:
#   False/default: Disables pipelining for APT
#   None/Unchanged: Use OS default
#   Number: Set pipelining to some number (not recommended)
apt_pipelining: False

## apt config via system_info:
# under the 'system_info', you can customize cloud-init's interaction
# with apt.
#  system_info:
#    apt_get_command: [command, argument, argument]
#    apt_get_upgrade_subcommand: dist-upgrade
#
# apt_get_command:
#  To specify a different 'apt-get' command, set 'apt_get_command'.
#  This must be a list, and the subcommand (update, upgrade) is appended to it.
#  default is:
#    ['apt-get', '--option=Dpkg::Options::=--force-confold',
#     '--option=Dpkg::options::=--force-unsafe-io', '--assume-yes', '--quiet']
#
# apt_get_upgrade_subcommand: "dist-upgrade"
#  Specify a different subcommand for 'upgrade. The default is 'dist-upgrade'.
#  This is the subcommand that is invoked for package_upgrade.
#
# apt_get_wrapper:
#   command: eatmydata
#   enabled: [True, False, "auto"]
#

# Install additional packages on first boot
#
# Default: none
#
# if packages are specified, this apt_update will be set to true

packages:
  - amd-confidential-computing-guest

apt:
  # The apt config consists of two major "areas".
  #
  # On one hand there is the global configuration for the apt feature.
  #
  # On one hand (down in this file) there is the source dictionary which allows
  # to define various entries to be considered by apt.

  ##############################################################################
  # Section 1: global apt configuration
  #
  # The following examples number the top keys to ease identification in
  # discussions.

  # 1.1 preserve_sources_list
  #
  # Preserves the existing /etc/apt/sources.list
  # Default: false - do overwrite sources_list. If set to true then any
  # "mirrors" configuration will have no effect.
  # Set to true to avoid affecting sources.list. In that case only
  # "extra" source specifications will be written into
  # /etc/apt/sources.list.d/*
  preserve_sources_list: true

  # 1.2 disable_suites
  #
  # This is an empty list by default, so nothing is disabled.
  #
  # If given, those suites are removed from sources.list after all other
  # modifications have been made.
  # Suites are even disabled if no other modification was made,
  # but not if is preserve_sources_list is active.
  # There is a special alias "$RELEASE" as in the sources that will be replace
  # by the matching release.
  #
  # To ease configuration and improve readability the following common ubuntu
  # suites will be automatically mapped to their full definition.
  # updates   => $RELEASE-updates
  # backports => $RELEASE-backports
  # security  => $RELEASE-security
  # proposed  => $RELEASE-proposed
  # release   => $RELEASE
  #
  # There is no harm in specifying a suite to be disabled that is not found in
  # the source.list file (just a no-op then)
  #
  # Note: Lines don't get deleted, but disabled by being converted to a comment.
  # The following example disables all usual defaults except $RELEASE-security.
  # On top it disables a custom suite called "mysuite"
  #disable_suites: [$RELEASE-updates, backports, $RELEASE, mysuite]

  # 1.3 primary/security archives
  #
  # Default: none - instead it is auto select based on cloud metadata
  # so if neither "uri" nor "search", nor "search_dns" is set (the default)
  # then use the mirror provided by the DataSource found.
  # In EC2, that means using <region>.ec2.archive.ubuntu.com
  #
  # define a custom (e.g. localized) mirror that will be used in sources.list
  # and any custom sources entries for deb / deb-src lines.
  #
  # One can set primary and security mirror to different uri's
  # the child elements to the keys primary and secondary are equivalent
  #primary:
    # arches is list of architectures the following config applies to
    # the special keyword "default" applies to any architecture not explicitly
    # listed.
    #- arches: [amd64, i386, default]
      # uri is just defining the target as-is
      #uri: http://us.archive.ubuntu.com/ubuntu
      #
      # via search one can define lists that are tried one by one.
      # The first with a working DNS resolution (or if it is an IP) will be
      # picked. That way one can keep one configuration for multiple
      # subenvironments that select the working one.
      #search:
        #- http://cool.but-sometimes-unreachable.com/ubuntu
        #- http://us.archive.ubuntu.com/ubuntu
      # if no mirror is provided by uri or search but 'search_dns' is
      # true, then search for dns names '<distro>-mirror' in each of
      # - fqdn of this host per cloud metadata
      # - localdomain
      # - no domain (which would search domains listed in /etc/resolv.conf)
      # If there is a dns entry for <distro>-mirror, then it is assumed that
      # there is a distro mirror at http://<distro>-mirror.<domain>/<distro>
      #
      # That gives the cloud provider the opportunity to set mirrors of a distro
      # up and expose them only by creating dns entries.
      #
      # if none of that is found, then the default distro mirror is used
      #search_dns: true
      #
      # If multiple of a category are given
      #   1. uri
      #   2. search
      #   3. search_dns
      # the first defining a valid mirror wins (in the order as defined here,
      # not the order as listed in the config).
      #
      # Additionally, if the repository requires a custom signing key, it can be
      # specified via the same fields as for custom sources:
      #   'keyid': providing a key to import via shortid or fingerprint
      #   'key': providing a raw PGP key
      #   'keyserver': specify an alternate keyserver to pull keys from that
      #                were specified by keyid
    #- arches: [s390x, arm64]
      # as above, allowing to have one config for different per arch mirrors
  # security is optional, if not defined it is set to the same value as primary
  #security:
    #- uri: http://security.ubuntu.com/ubuntu
  # If search_dns is set for security the searched pattern is:
  #   <distro>-security-mirror

  # if no mirrors are specified at all, or all lookups fail it will try
  # to get them from the cloud datasource and if those neither provide one fall
  # back to:
  #   primary: http://archive.ubuntu.com/ubuntu
  #   security: http://security.ubuntu.com/ubuntu

  # 1.4 sources_list
  #
  # Provide a custom template for rendering sources.list
  # without one provided cloud-init uses builtin templates for
  # ubuntu and debian.
  # Within these sources.list templates you can use the following replacement
  # variables (all have sane Ubuntu defaults, but mirrors can be overwritten
  # as needed (see above)):
  # => $RELEASE, $MIRROR, $PRIMARY, $SECURITY
  #sources_list: | # written by cloud-init custom template
    #deb $MIRROR $RELEASE main restricted
    #deb-src $MIRROR $RELEASE main restricted
    #deb $PRIMARY $RELEASE universe restricted
    #deb $SECURITY $RELEASE-security multiverse

  # 1.5 conf
  #
  # Any apt config string that will be made available to apt
  # see the APT.CONF(5) man page for details what can be specified
  conf: | # APT config
    APT {
      Get {
        Assume-Yes "true";
        Fix-Broken "true";
      };
    };

  # 1.6 (http_|ftp_|https_)proxy
  #
  # Proxies are the most common apt.conf option, so that for simplified use
  # there is a shortcut for those. Those get automatically translated into the
  # correct Acquire::*::Proxy statements.
  #
  # note: proxy actually being a short synonym to http_proxy
  #proxy: http://[[user][:pass]@]host[:port]/
  #http_proxy: http://[[user][:pass]@]host[:port]/
  #ftp_proxy: ftp://[[user][:pass]@]host[:port]/
  #https_proxy: https://[[user][:pass]@]host[:port]/

  # 1.7 add_apt_repo_match
  #
  # 'source' entries in apt-sources that match this python regex
  # expression will be passed to add-apt-repository
  # The following example is also the builtin default if nothing is specified
  #add_apt_repo_match: '^[\w-]+:\w'


  ##############################################################################
  # Section 2: source list entries
  #
  # This is a dictionary (unlike most block/net which are lists)
  #
  # The key of each source entry is the filename and will be prepended by
  # /etc/apt/sources.list.d/ if it doesn't start with a '/'.
  # If it doesn't end with .list it will be appended so that apt picks up it's
  # configuration.
  #
  # Whenever there is no content to be written into such a file, the key is
  # not used as filename - yet it can still be used as index for merging
  # configuration.
  #
  # The values inside the entries consist of the following optional entries:
  #   'source': a sources.list entry (some variable replacements apply)
  #   'keyid': providing a key to import via shortid or fingerprint
  #   'key': providing a raw PGP key
  #   'keyserver': specify an alternate keyserver to pull keys from that
  #                were specified by keyid

  # This allows merging between multiple input files than a list like:
  # cloud-config1
  # sources:
  #   s1: {'key': 'key1', 'source': 'source1'}
  # cloud-config2
  # sources:
  #   s2: {'key': 'key2'}
  #   s1: {'keyserver': 'foo'}
  # This would be merged to
  # sources:
  #   s1:
  #     keyserver: foo
  #     key: key1
  #     source: source1
  #   s2:
  #     key: key2
  #
  # The following examples number the subfeatures per sources entry to ease
  # identification in discussions.

  sources:
    sev-dev.list:
      # 2.1 source
      #
      # Creates a file in /etc/apt/sources.list.d/ for the sources list entry
      # based on the key: "/etc/apt/sources.list.d/sev-dev.list"
      source: "deb http://sev-repo.multipass/apt/sev stable main"

    #curtin-dev-ppa.list:
      # 2.1 source
      #
      # Creates a file in /etc/apt/sources.list.d/ for the sources list entry
      # based on the key: "/etc/apt/sources.list.d/curtin-dev-ppa.list"
      #source: "deb http://ppa.launchpad.net/curtin-dev/test-archive/ubuntu xenial main"

      # 2.2 keyid
      #
      # Importing a gpg key for a given key id. Used keyserver defaults to
      # keyserver.ubuntu.com
      #keyid: F430BBA5 # GPG key ID published on a key server

    #ignored1:
      # 2.3 PPA shortcut
      #
      # Setup correct apt sources.list line and Auto-Import the signing key
      # from LP
      #
      # See https://help.launchpad.net/Packaging/PPA for more information
      # this requires 'add-apt-repository'. This will create a file in
      # /etc/apt/sources.list.d automatically, therefore the key here is
      # ignored as filename in those cases.
      #source: "ppa:curtin-dev/test-archive"    # Quote the string

    #my-repo2.list:
      # 2.4 replacement variables
      #
      # sources can use $MIRROR, $PRIMARY, $SECURITY and $RELEASE replacement
      # variables.
      # They will be replaced with the default or specified mirrors and the
      # running release.
      # The entry below would be possibly turned into:
      #   source: deb http://archive.ubuntu.com/ubuntu xenial multiverse
      #source: deb $MIRROR $RELEASE multiverse

    #my-repo3.list:
      # this would have the same end effect as 'ppa:curtin-dev/test-archive'
      #source: "deb http://ppa.launchpad.net/curtin-dev/test-archive/ubuntu xenial main"
      #keyid: F430BBA5 # GPG key ID published on the key server
      #filename: curtin-dev-ppa.list

    #ignored2:
      # 2.5 key only
      #
      # this would only import the key without adding a ppa or other source spec
      # since this doesn't generate a source.list file the filename key is ignored
      #keyid: F430BBA5 # GPG key ID published on a key server

    #ignored3:
      # 2.6 key id alternatives
      #
      # Keyid's can also be specified via their long fingerprints
      #keyid: B59D 5F15 97A5 04B7 E230  6DCA 0620 BBCF 0368 3F77

    #ignored4:
      # 2.7 alternative keyservers
      #
      # One can also specify alternative keyservers to fetch keys from.
      #keyid: B59D 5F15 97A5 04B7 E230  6DCA 0620 BBCF 0368 3F77
      #keyserver: pgp.mit.edu

    #my-repo4.list:
      # 2.8 raw key
      #
      # The apt signing key can also be specified by providing a pgp public key
      # block. Providing the PGP key this way is the most robust method for
      # specifying a key, as it removes dependency on a remote key server.
      #
      # As with keyid's this can be specified with or without some actual source
      # content.
      #key: | # The value needs to start with -----BEGIN PGP PUBLIC KEY BLOCK-----
        #-----BEGIN PGP PUBLIC KEY BLOCK-----
        #Version: SKS 1.0.10

        #mI0ESpA3UQEEALdZKVIMq0j6qWAXAyxSlF63SvPVIgxHPb9Nk0DZUixn+akqytxG4zKCONz6
        #qLjoBBfHnynyVLfT4ihg9an1PqxRnTO+JKQxl8NgKGz6Pon569GtAOdWNKw15XKinJTDLjnj
        #9y96ljJqRcpV9t/WsIcdJPcKFR5voHTEoABE2aEXABEBAAG0GUxhdW5jaHBhZCBQUEEgZm9y
        #IEFsZXN0aWOItgQTAQIAIAUCSpA3UQIbAwYLCQgHAwIEFQIIAwQWAgMBAh4BAheAAAoJEA7H
        #5Qi+CcVxWZ8D/1MyYvfj3FJPZUm2Yo1zZsQ657vHI9+pPouqflWOayRR9jbiyUFIn0VdQBrP
        #t0FwvnOFArUovUWoKAEdqR8hPy3M3APUZjl5K4cMZR/xaMQeQRZ5CHpS4DBKURKAHC0ltS5o
        #uBJKQOZm5iltJp15cgyIkBkGe8Mx18VFyVglAZey
        #=Y2oI
        #-----END PGP PUBLIC KEY BLOCK-----

      key: |
        -----BEGIN PGP PUBLIC KEY BLOCK-----

        mQGNBGCv3c4BDACmPwFCv70lKYkv7X0wjHv8imgzpYhYRhyUswSXZLBh9XEOybca
        ZdkdJRFusnAhImOqyAJLuHiOCyUGIuuifUQlsi6ymyKDjs6SdQZNQRPFHeSbBpy4
        O/GgV3MOkD9Q7rgra8pFeDX46PIUP+4qZ7smeHvTmQwKfMKphUGnW+6061DjMNPp
        8WMfSR0BABHLGPNs3k78g8FIarYM+WA86paBX9ejh+Lr1ZpZzP1t82V+okXpLAEg
        5Wy6h8wpcLnqaB10z9o24pTc6VRWKxUuSW/gAMP7VpFp+t+fiOkMlZeEdUnJ0WYU
        gcPz9xA2qrZp93ECa3s10GxDzxa381gJgxP5baRHlot8kYu0Nnx9gV4x4uEWnp8N
        75Yp6zkfgNdfPrtDtNnMdlEEpAf5xXjE6chojajXEVGXOCnSdtGqzvOSzrpKfuFO
        b3FHMjqzeEpbxHRcFoSwdgjqH3rTExBQN5aAQT1kObk94pNwsUVSrTTCuQHrzAr2
        uvUak667MaTkBV8AEQEAAbQOU0VWIFJlcG9zaXRvcnmJAdQEEwEKAD4WIQSo+NTv
        +ZJlKsYDdXhUvuGIgNMFRAUCYK/dzgIbAwUJA8JnAAULCQgHAgYVCgkICwIEFgID
        AQIeAQIXgAAKCRBUvuGIgNMFROrhC/99FGWF53ooxd/YOw0Z9srJT8scCP2B419V
        XDney0JQHTltalwYPApbSldeMQfqY+0zEgiRc1dcBd99ThSQ+rmGMT/+byD6Z8CQ
        lASv+jBfbCbUbT3gGvvyLpMQ8sv+1cOQMUw2yLYWlLaKDW/vlQm2XDbeoWzcAhJp
        NHpLKomwf5GXP6o9Gf7H/stLTynNnSckGq2fwEOA/XWI/aj2mYanzWTO6HotV9PH
        Quwd/lDstaZbXFoyBh35v+gx+cTAU/Aw4q4c5UCFxcmiwmRRhhKvlTdq/xtEC3VL
        oVauQEOeUKWNzH1kmZG9ukc50Z1BaZhi5LuMPS6bhbXgkFnbyw7rzHK7fSZMYx8i
        yxImpjC2LGXC4yxoczgL5OzeqnQtq90zmhJaS/7mukjG6Enteh7lShoSk5VNj59+
        RidIbONJkIzqB9l2USWH9demjt57ySAYS5PKYgj7VXyN4YrYBQj0eq4uc8Hs53z9
        PCFmfbHN/ZT6CaD0MG0tvEqi6LBlYuS5AY0EYK/dzgEMANjndeI0IXWveqE/BhL1
        g1x5uLRHdeTcFumSlvHZGnEZWIJp7hqV76fmy5sBW4tQVoDBsrgOfi4EP46riWsX
        doVeMj6fk8i+WGlTCLL43zdiVPTKBcTn/XjrZsIB4b0CEyPhBsgJRUf0KIFzXc3L
        ZVk6Q/2PDWtl9FfgkJlSXZF0+U6u8eTNGsGuQKZpqG2X8c8x3TPV+GpCU8qSbnDJ
        Fyb38CISn4HZ4xbx/ToKX4CLmYRaVxEVcyumEtqJJYTt30NKeJSwwjrDqXrTisY+
        uVTPuPrMCl8VPn8OP4q+WEB9yjEi2F58bRf4gxQR/cD5F3gTU5eXkpN94WHcW6gN
        P11ZKO5ncgU5ThriWHRqBjkk4PXn3XLrudUKbVqhOikkS/VNNDmn2AqoPK43mPUS
        B5kiriJKkuGbzs4VNELQwlBBV1oiJJ2algZ/JbpwhL6UclXSXsivNH1BaVzK+o7l
        JLe5yEwJ0Yyd1sDTp3k3kOt4/zm9gMJ4L5KouAZO+2sZVQARAQABiQG8BBgBCgAm
        FiEEqPjU7/mSZSrGA3V4VL7hiIDTBUQFAmCv3c4CGwwFCQPCZwAACgkQVL7hiIDT
        BURjqAwAitEiiJdPtUCJlT5zwEAe3Ryu8E7IQIKj9VxS1rVu2Kyo14s6S8riwb+N
        sstngRG+LhuY+DpXxq+kpoIUBIXs8tqRsiEkzW14xu7eM2kj3EmFEC3WERTvlnJq
        43xZ+IuPD7MaKRPO/93MT+TbPJuDkmTqZRQJ8hI3J0YNkHP/EepTYoTsu4R8qau8
        WHuD1nepx0OS1ZOZzW675kZXIgO71ckVAerfpsn4Vuvq78m9pSAGIP5ji/5sMgzk
        dw/MOo0Txc0INtoxRwxR7+NofH4Aeqm7yvZ7PE2yrPsBi/i2/N0fa0+HkUDKmW1M
        lqcQhbkIhLz1o5wpXl5REUvg+vNbVdYj6Is8RSd7sh+cxLXHJBP2mD41/AgubGAK
        DEZ7f9oOAnq3Tf/74Q+qFBoianitk0NZ66/qjrT0R+iyAreSbujARgGDxIZ4XqlQ
        Vj/6UTdvgeB6IMM8enMoA7G3MPPUpTGAzZ8wlXouuS6OuxbUH8kSVbrEEzdRtGMW
        31aQrNq4
        =NZHW
        -----END PGP PUBLIC KEY BLOCK-----

# Upgrade the instance on first boot
# (ie run apt-get upgrade)
#
# Default: false
# Aliases: apt_upgrade
package_upgrade: true

## poweroff or reboot system after finished
# default: none
#
# power_state can be used to make the system shutdown, reboot or
# halt after boot is finished.  This same thing can be acheived by
# user-data scripts or by runcmd by simply invoking 'shutdown'.
#
# Doing it this way ensures that cloud-init is entirely finished with
# modules that would be executed, and avoids any error/log messages
# that may go to the console as a result of system services like
# syslog being taken down while cloud-init is running.
#
# If you delay '+5' (5 minutes) and have a timeout of
# 120 (2 minutes), then the max time until shutdown will be 7 minutes.
# cloud-init will invoke 'shutdown +5' after the process finishes, or
# when 'timeout' seconds have elapsed.
#
# delay: form accepted by shutdown.  default is 'now'. other format
#        accepted is '+m' (m in minutes)
# mode: required. must be one of 'poweroff', 'halt', 'reboot'
# message: provided as the message argument to 'shutdown'. default is none.
# timeout: the amount of time to give the cloud-init process to finish
#          before executing shutdown.
# condition: apply state change only if condition is met.
#            May be boolean True (always met), or False (never met),
#            or a command string or list to be executed.
#            command's exit code indicates:
#               0: condition met
#               1: condition not met
#            other exit codes will result in 'not met', but are reserved
#            for future use.
#
#power_state:
  #delay: "+30"
  #mode: poweroff
  #message: Bye Bye
  #timeout: 30
  #condition: True
#power_state:
#  mode: poweroff
#  message: "SEV-ES/SNP does not support rebooting, so always poweroff instead!"

# run commands
# default: none
# runcmd contains a list of either lists or a string
# each item will be executed in order at rc.local like level with
# output to the console
# - runcmd only runs during the first boot
# - if the item is a list, the items will be properly executed as if
#   passed to execve(3) (with the first arg as the command).
# - if the item is a string, it will be simply written to the file and
#   will be interpreted by 'sh'
#
# Note, that the list has to be proper yaml, so you have to quote
# any characters yaml would eat (':' can be problematic)
#runcmd:
# - [ ls, -l, / ]
# - [ sh, -xc, "echo $(date) ': hello world!'" ]
# - [ sh, -c, echo "=========hello world'=========" ]
# - ls -l /root
 # Note: Don't write files to /tmp from cloud-init use /run/somedir instead.
 # Early boot environments can race systemd-tmpfiles-clean LP: #1707222.
# - mkdir /run/mydir
# - [ wget, "http://slashdot.org", -O, /run/mydir/index.html ]
runcmd:
  - mkdir -p /run/attestation
  - cd /run/attestation
  - hostname > hostname
  - cp /etc/ssh/ssh_host_rsa_key.pub .
  - cp /home/jesse/.ssh/authorized_keys guest_owner.pub
  - ip -brief -family inet address show scope global | grep -o "[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*" > address
  - cat ssh_host_rsa_key.pub guest_owner.pub address > pubkeys
  - sev-guest get-report -f pubkeys -x guest_report.bin
# Uncomment the following line to see an attestation failure.
#  - dd if=/dev/random of=guest_report.bin bs=4 count=1 conv=notrunc
  - tar -cvf guest-report.tar *.cert guest_report.bin hostname address pubkeys
  - /usr/local/bin/upload-guest-report.sh guest-report.tar
  - rm -f /usr/local/bin/upload-guest-report.sh

write_files:
  - path: /usr/local/bin/upload-guest-report.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      curl --data-binary @${1} -H "Content-Type: application/octet-stream" http://sev-repo.multipass/cgi-bin/guest-attestation.sh

